<project name="Deploy to Enviroment" default="startDeployProcess" basedir="." xmlns:sf="antlib:com.salesforce">
  <property environment="env"></property>
  <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce">
    <classpath>
      <pathelement location="../ant-salesforce.jar" />
    </classpath>
  </taskdef>
  <!-- define tasks -->
  <taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy"/>

  <!-- Load credentials from configuration folder -->
  <target name="load_credentials">
    <property name="SANDBOX" value="${env.SANDBOX}"/>
    <property name="PACKAGE_TO_VALIDATE" value="${env.PACKAGE_TO_VALIDATE}"/>
    <property name="SALESFORCE_URL" value="${env.SALESFORCE_URL}"/>
    <property name="SALESFORCE_USERNAME" value="${env.SALESFORCE_USERNAME}"/>
    <property name="SALESFORCE_PASSWORD" value="${env.SALESFORCE_PASSWORD}"/>
    <property name="SALESFORCE_TOKEN" value="${env.SALESFORCE_TOKEN}"/>
    <echo message="Loading ./build.properties"></echo>
    <property file="./build.properties"></property>
    <property file="./${SANDBOX}/build.properties"></property>
  </target>
  <!-- Prepare files -->
  <target name="init" depends="load_credentials">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <delete failonerror="false" dir="${DIST_DIR}"/>
    <mkdir dir="${DIST_DIR}"/>
    <!--delete failonerror="false" dir="${DIST_DESTRUCTIVE}"/>
    <mkdir dir="${DIST_DESTRUCTIVE}"/-->
    <copy file="package.xml" todir="src" />
  </target>

  <target name="init_prebuilt" depends="load_credentials">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
  </target>

  <target name="createDeployPkg" depends="init">
    <groovy>
      <classpath>
        <dirset dir="../groovy"/>
      </classpath>
      String srcDir = "${properties['env.WORKSPACE']}"
      String distFolder = "${properties['DIST_DIR']}"
      String baseDir = new File(System.getProperty("user.dir"))

      def packageManager = new PackageManager( sourceDir: srcDir,
                                               destinationDir: distFolder,
                                               baseDir: baseDir)

      String packageToValidate = properties["PACKAGE_TO_VALIDATE"]
      packageManager.isDestructiveChangesPresent = 'Destructive' == packageToValidate
      packageManager.createDeployPackage()
    </groovy>
  </target>

  <target name="delete_social_post_files" depends="createDeployPkg">
    <echo message="deleting Social-Post related files from ${DIST_DIR}..." />
    <delete file="${DIST_DIR}/workflows/SocialPost.workflow" failonerror="false" />
    <delete file="${DIST_DIR}/layouts/SocialPost-Social Post Layout.layout" failonerror="false" />
  </target>

  <target name="deployPkg" depends="delete_social_post_files">
    <groovy>
      String packageToValidate = properties["PACKAGE_TO_VALIDATE"]
      switch ( packageToValidate ) {
          case 'Main_Package':
              properties['DIST_DIR'] = "dist"
              break
          case 'Destructive':
              properties['DIST_DIR'] = "dist_destructive"
              break
          default:
              properties['DIST_DIR'] = "dist"
      }
      println "Deploy from ${properties['DIST_DIR']}"
    </groovy>
        <sf:deploy
          autoUpdatePackage="true"
          rollbackOnError="true"
          username="${SALESFORCE_USERNAME}"
          password="${SALESFORCE_PASSWORD}${SALESFORCE_TOKEN}"
          serverurl="${SALESFORCE_URL}"
          deployRoot="${DIST_DIR}" />
  </target>



  <target name="validate" depends="delete_social_post_files">
    <groovy>
      String packageToValidate = properties["PACKAGE_TO_VALIDATE"]
      switch ( packageToValidate ) {
          case 'Main_Package':
              properties['DIST_DIR'] = "dist"
              break
          case 'Destructive':
              properties['DIST_DIR'] = "dist_destructive"
              break
          default:
              properties['DIST_DIR'] = "dist"
      }
      println "Validating on ${properties['DIST_DIR']}"
    </groovy>
    <sf:deploy
      autoUpdatePackage="true"
      rollbackOnError="true"
      runAllTests="true"
      checkOnly="true"
      pollWaitMillis="40000"
      deployRoot="${DIST_DIR}"
      serverurl="${SALESFORCE_URL}"
      password="${SALESFORCE_PASSWORD}${SALESFORCE_TOKEN}"
      username="${SALESFORCE_USERNAME}"/>
  </target>

  <target name="validate_no_test_cases" depends="delete_social_post_files">
    <sf:deploy
      autoUpdatePackage="true"
      rollbackOnError="true"
      checkOnly="true"
      pollWaitMillis="40000"
      deployRoot="${DIST_DIR}"
      serverurl="${SALESFORCE_URL}"
      password="${SALESFORCE_PASSWORD}${SALESFORCE_TOKEN}"
      username="${SALESFORCE_USERNAME}"/>
  </target>

  <target name="startFullValidationProcess" >
    <groovy>
      String srcDir = "${properties['env.WORKSPACE']}"
      properties['DIST_DIR'] = "dist"
      project.executeTarget("validate")
    </groovy>
  </target>

  <target name="deployPrebuiltPkg" depends="init_prebuilt">
    <groovy>
      String packageToValidate = properties["PACKAGE_TO_VALIDATE"]
      switch ( packageToValidate ) {
          case 'Main_Package':
              properties['DIST_DIR'] = "dist"
              break
          case 'Destructive':
              properties['DIST_DIR'] = "dist_destructive"
              break
          default:
              properties['DIST_DIR'] = "dist"
      }
      println "Deploy from ${properties['DIST_DIR']}"
    </groovy>
        <sf:deploy
          autoUpdatePackage="true"
          rollbackOnError="true"
          username="${SALESFORCE_USERNAME}"
          password="${SALESFORCE_PASSWORD}${SALESFORCE_TOKEN}"
          serverurl="${SALESFORCE_URL}"
          deployRoot="${DIST_DIR}" />
  </target>

    <target name="Validation_RunAllTests" depends="delete_social_post_files">
        <groovy>
            String packageToValidate = properties["PACKAGE_TO_VALIDATE"]
            switch ( packageToValidate ) {
            case 'Main_Package':
            properties['DIST_DIR'] = "dist"
            break
            case 'Destructive':
            properties['DIST_DIR'] = "dist_destructive"
            break
            default:
            properties['DIST_DIR'] = "dist"
            }
            println "Validating on ${properties['DIST_DIR']}"
        </groovy>
        <sf:deploy
                autoUpdatePackage="true"
                rollbackOnError="true"
                runAllTests="true"
                checkOnly="true"
                pollWaitMillis="40000"
                deployRoot="${DIST_DIR}"
                serverurl="${SALESFORCE_URL}"
                password="${SALESFORCE_PASSWORD}${SALESFORCE_TOKEN}"
                username="${SALESFORCE_USERNAME}"/>
    </target>

    <!-- WITHOUT TOKEN -->
    <!-- Load credentials from configuration folder -->
    <target name="bind_credentials">
        <property name="SANDBOX" value="${env.SANDBOX}"/>
        <property name="PACKAGE_TO_VALIDATE" value="${env.PACKAGE_TO_VALIDATE}"/>
        <property name="SALESFORCE_URL" value="${env.SALESFORCE_URL}"/>
        <property name="SALESFORCE_USERNAME" value="${env.SALESFORCE_USERNAME}"/>
        <property name="SALESFORCE_PASSWORD" value="${env.SALESFORCE_PASSWORD}"/>
        <echo message="Loading ./build.properties"></echo>
        <property file="./build.properties"></property>
        <property file="./${SANDBOX}/build.properties"></property>
    </target>

    <!-- Prepare files -->
    <target name="bind" depends="bind_credentials">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <delete failonerror="false" dir="${DIST_DIR}"/>
        <mkdir dir="${DIST_DIR}"/>
        <!--delete failonerror="false" dir="${DIST_DESTRUCTIVE}"/>
        <mkdir dir="${DIST_DESTRUCTIVE}"/-->
        <copy file="package.xml" todir="src" />
    </target>

    <target name="bind_prebuilt" depends="bind_credentials">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
    </target>

    <target name="On_Demand_CreateDeployPkg" depends="bind">
        <groovy>
            <classpath>
                <dirset dir="../groovy"/>
            </classpath>
            String srcDir = "${properties['env.WORKSPACE']}"
            String distFolder = "${properties['DIST_DIR']}"
            String baseDir = new File(System.getProperty("user.dir"))

            def packageManager = new PackageManager( sourceDir: srcDir, destinationDir: distFolder, baseDir: baseDir)
            String packageToValidate = properties["PACKAGE_TO_VALIDATE"]
            packageManager.isDestructiveChangesPresent = 'Destructive' == packageToValidate
            packageManager.createDeployPackage()
        </groovy>
    </target>

    <target name="bind_delete_social_post_files" depends="On_Demand_CreateDeployPkg">
        <echo message="deleting Social-Post related files from ${DIST_DIR}..." />
        <delete file="${DIST_DIR}/workflows/SocialPost.workflow" failonerror="false" />
        <delete file="${DIST_DIR}/layouts/SocialPost-Social Post Layout.layout" failonerror="false" />
    </target>

    <target name="On_Demand_Validate" depends="bind_delete_social_post_files">
        <groovy>
            String packageToValidate = properties["PACKAGE_TO_VALIDATE"]
            switch ( packageToValidate ) {
                case 'Main_Package':
                    properties['DIST_DIR'] = "dist"
                break
                case 'Destructive':
                    properties['DIST_DIR'] = "dist_destructive"
                break
                default:
                    properties['DIST_DIR'] = "dist"
            }
            println "On Demand Validating without run all tests on ${properties['DIST_DIR']}"
        </groovy>
        <sf:deploy
                autoUpdatePackage="true"
                rollbackOnError="true"
                runAllTests="false"
                checkOnly="false"
                pollWaitMillis="40000"
                deployRoot="${DIST_DIR}"
                serverurl="${SALESFORCE_URL}"
                password="${SALESFORCE_PASSWORD}"
                username="${SALESFORCE_USERNAME}"/>
    </target>

    <target name="On_Demand_StartValidationProcess">
        <groovy>
            String srcDir = "${properties['env.WORKSPACE']}"
            properties['DIST_DIR'] = "dist"
            project.executeTarget("On_Demand_Validate")
        </groovy>
    </target>

    <target name="On_Demand_DeployPrebuiltPkg" depends="bind_delete_social_post_files">
        <groovy>
            String packageToValidate = properties["PACKAGE_TO_VALIDATE"]
            switch ( packageToValidate ) {
                case 'Main_Package':
                    properties['DIST_DIR'] = "dist"
                break
                case 'Destructive':
                    properties['DIST_DIR'] = "dist_destructive"
                break
                default:
                    properties['DIST_DIR'] = "dist"
            }
            println "On Demand Deploy from ${properties['DIST_DIR']}"
        </groovy>
        <sf:deploy
                autoUpdatePackage="true"
                rollbackOnError="true"
                username="${SALESFORCE_USERNAME}"
                password="${SALESFORCE_PASSWORD}"
                serverurl="${SALESFORCE_URL}"
                deployRoot="${DIST_DIR}" />
    </target>

    <target name="On_Demand_Deploy">
        <groovy>
            String srcDir = "${properties['env.WORKSPACE']}"
            properties['DIST_DIR'] = "dist"
            project.executeTarget("On_Demand_DeployPrebuiltPkg")
        </groovy>
    </target>

    <target name="On_Demand_Validation_RunAllTests" depends="bind_delete_social_post_files">
        <groovy>
            String packageToValidate = properties["PACKAGE_TO_VALIDATE"]
            switch ( packageToValidate ) {
                case 'Main_Package':
                    properties['DIST_DIR'] = "dist"
                break
                case 'Destructive':
                    properties['DIST_DIR'] = "dist_destructive"
                break
                default:
                    properties['DIST_DIR'] = "dist"
            }
            println "On Demand Validating run all tests on ${properties['DIST_DIR']}"
        </groovy>
        <sf:deploy
                autoUpdatePackage="true"
                rollbackOnError="true"
                runAllTests="true"
                checkOnly="true"
                pollWaitMillis="40000"
                deployRoot="${DIST_DIR}"
                serverurl="${SALESFORCE_URL}"
                password="${SALESFORCE_PASSWORD}"
                username="${SALESFORCE_USERNAME}"/>
    </target>

    <target name="On_Demand_StartRunAllTestsValidationProcess">
        <groovy>
            String srcDir = "${properties['env.WORKSPACE']}"
            properties['DIST_DIR'] = "dist"
            project.executeTarget("On_Demand_Validation_RunAllTests")
        </groovy>
    </target>
</project>