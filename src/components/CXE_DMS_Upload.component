<apex:component controller="CXE_DMSUpload_ctrl">
    <apex:attribute name="account_id" description="Account Id" type="Id" assignTo="{!dms.CXE_Account__c}"/>
    <apex:attribute name="case_id" description="Case Id" type="String"/>
    <apex:attribute name="service_id" description="Service Id" type="Id" assignTo="{!dms.CXE_Service__c}"/>
    <apex:attribute name="type" description="Account or Case" type="String"/>
    <apex:attribute name="account_name" description="Account Name" type="String"/>
    <apex:attribute name="sin" description="Service No." type="String"/>

    <script src="/soap/ajax/40.0/connection.js" type="text/javascript"></script>

    <template id="attachment-list-template">
        <tr>
            <td style="padding-left: 7px;"><input id="{{ID}}" class="selected-file" type="radio" value="{{ID}}" data-type="{{TYPE}}" data-extension="{{EXTENSION}}" name="selected-file" /></td>
            <td style="padding-left: 7px;white-space:nowrap;"><label for="{{ID}}">{{NAME}} - {{EXTENSION}}</label></td>
            <td style="padding-left: 7px;white-space:nowrap;"><span class="size_amount">{{SIZE_AMOUNT}}</span><span class="size_unit">{{SIZE_UNIT}}</span></td>
        </tr>
    </template>

    <style>
        #main:not(.busy) .loading
        , #main.busy .slds-form
        , #main[mode=service] .service-hide
        , #main[mode=case] .case-hide
        , #main[mode=account] .account-hide
        , .required-sign
        , #main[mode=case] #upload-form[repo=case] .file-repo
        , #main[mode=case] #upload-form[repo=new] .sf-repo
        , #file-list tr.selected .selection-off
        , #file-list tr:not(.selected) .selection-on
        , #main.no-acc-id .main-form
        , #main:not(.no-acc-id) .invalid-acc-id
        , .hide{
            display:none;
        }
        .required .required-sign{
            display: inherit !important;
            color: red;
        }

    </style>

    <div id="main" class="slds {!IF(ISNULL(account_id), 'no-acc-id', '')}" mode="{!type}">
        <div class="main-form">
            <apex:form >
                <div class="slds-form slds-form_compound">

                    <div class="slds-form-element__group" id="upload-form" repo="case">
                        <div class="slds-form-element__row">
                            <div id="CXE_Nature_of_Transaction_SA_RF__c" class="slds-form-element slds-size_1-of-2">
                                <label class="slds-form-element__label">
                                    <span>{!$ObjectType.DMS_Document__c.fields.CXE_Nature_of_Transaction_SA_RF__c.Label}<span class="required-sign">&nbsp;*</span></span>
                                    <apex:inputField value="{!dms.CXE_Nature_of_Transaction_SA_RF__c}" required="true"/>
                                </label>
                             </div>

                            <div id="CXE_Effectivity_Date_of_Document__c" class="slds-form-element slds-size_1-of-2">
                                <label class="slds-form-element__label">
                                    <span>{!$ObjectType.DMS_Document__c.fields.CXE_Effectivity_Date_of_Document__c.Label}<span class="required-sign">&nbsp;*</span></span>
                                    <apex:inputField value="{!dms.CXE_Effectivity_Date_of_Document__c}" required="true"/>
                                </label>
                            </div>
                        </div>

                        <div class="slds-form-element__row">
                            <div id="CXE_Document_Category__c" class="slds-form-element slds-size_1-of-2">
                                <label class="slds-form-element__label">
                                    <span>{!$ObjectType.DMS_Document__c.fields.CXE_Document_Category__c.Label}</span>
                                    <apex:inputField value="{!dms.CXE_Document_Category__c}" required="true"/>
                                </label>
                            </div>

                            <div id="CXE_Expiration_Date_of_Document__c" class="slds-form-element slds-size_1-of-2">
                                <label class="slds-form-element__label">
                                    <span>{!$ObjectType.DMS_Document__c.fields.CXE_Expiration_Date_of_Document__c.Label}</span>
                                    <apex:inputField value="{!dms.CXE_Expiration_Date_of_Document__c}" required="true"/>
                                </label>
                            </div>
                        </div>

                        <div class="slds-form-element__row">
                            <div id="CXE_Document_Type__c" class="slds-form-element slds-size_1-of-2">
                                <label class="slds-form-element__label">
                                    <span>{!$ObjectType.DMS_Document__c.fields.CXE_Document_Type__c.Label}</span>
                                    <apex:inputField value="{!dms.CXE_Document_Type__c}" required="true" style="max-width: 300px;"/>
                                </label>
                            </div>

                            <div id="CXE_Case__c" class="slds-form-element slds-size_1-of-2 service-hide case-hide">
                                <label class="slds-form-element__label">
                                    <span>{!$ObjectType.DMS_Document__c.fields.CXE_Case__c.Label}<span class="required-sign">&nbsp;*</span></span>
                                    <apex:inputField value="{!dms.CXE_Case__c}" required="true"/>
                                </label>

                                <div class="hide"><apex:inputField value="{!dms.CXE_Case__c}" required="true"/></div>
                                <div class="hide"><apex:inputField value="{!dms.CXE_Account__c}" required="true"/></div>
                            </div>
                        </div>

                        <div class="slds-form-element__row ">
                            <div id="DMS_Document__c" class="slds-form-element slds-size_1-of-2">
                                <label class="slds-form-element__label">
                                    <span>{!$ObjectType.DMS_Document__c.Label}</span>
                                </label>
                                <div class="account-hide service-hide">
                                    <div>&nbsp;<label><input id="upload-new-file" type="radio" name="upload-type" value="new" onchange="this.checked && document.getElementById('upload-form').setAttribute('repo', this.value) " />&nbsp;My Computer</label></div>
                                    <div>&nbsp;<label><input id="upload-attachment" type="radio" name="upload-type" value="case" checked="checked" onchange="this.checked && document.getElementById('upload-form').setAttribute('repo', this.value) " />&nbsp;Case's Attachment</label></div>
                                </div>
                                <div id="file-repo-fileupload-div">
                                    <div id="upload-new" class="slds-form-element__control"><input id="file" type="file"/></div>
                                </div>
                            </div>

                            <div id="upload-trigger" class="slds-form-element slds-size_1-of-2">
                                <label class="slds-form-element__label" for="text-input-id-1">&nbsp;</label>
                                <div class="slds-form-element__control">
                                    <button id="file-trigger" type="button" class="">Upload</button>
                                    <button id="attachment-trigger" type="button" class="service-hide account-hide sf-repo file-repo">Upload</button>
                                </div>
                            </div>
                        </div>

                        <div class="slds-form-element__row">
                            <div class="slds-form-element slds-size_1-of-1">
                                <sub style="display:block;white-space: pre-line;line-height: normal;">{!$Label.DMS_Upload_Hint}</sub>
                            </div>
                        </div>

                        <div class="slds-form-element__row sf-repo account-hide service-hide">
                            <div id="attach-file-list" class="slds-form-element slds-size_1-of-1">
                                <table><tbody id="file-list"></tbody></table>
                            </div>
                        </div>
                    </div>
                </div>
            </apex:form>

            <div class="loading" style="text-align:center;">
                <div id="loader" style="white-space: pre-line;">Processing</div>
                <a id="dms-link" target="_blank"></a>
            </div>
        </div>
        <div class="invalid-acc-id" style="padding-left: 10px;">
            <b>Please select {!$ObjectType.Account.Label} first.</b>
        </div>
    </div>
    

    <script>
        function setFocusOnLoad(){}

        var BLANK = '000000000000000';
        var _manifest = ([
            {type: 'Acknowledgement Receipt for Deposit Credited', cat: 'Customer - level', abbr: 'AR', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Affidavit of Self-Adjudication (Sole Heir)', cat: 'Service - level', abbr: 'SELFADJUD', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Agreement for Extension of Lines and/or Additional Facilities (CA Agreement)', cat: 'Service - level', abbr: 'CAAGREE', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Authority to Move-in', cat: 'Service - level', abbr: 'MOVEIN', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Authorization letter to transact with MERALCO', cat: 'Transaction - level', abbr: 'AUTHLTR', format: '[SIN]_[CXE_Nature_of_Transaction_SA_RF__c]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Authorized Withholding Agent (AWA) Notice from BIR', cat: 'Customer – level', abbr: 'AWA', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Automatic Payment Arrangement Form (APA)', cat: 'Customer - level', abbr: 'APA', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'BIR Certificate of Registration', cat: 'Customer - level', abbr: 'BIRCOR', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Birth/Death/Marriage Certificates', cat: 'Customer - level', abbr: 'BDMCERT', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Board Resolution', cat: 'Customer - level', abbr: 'BR', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Certificate of Award/ Notice/ Order issued by National Government Agencies', cat: 'Service - level', abbr: 'AWARDNGA', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Certificate of Compliance', cat: 'Service - level', abbr: 'CCOMP', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Certificate of Contestability', cat: 'Service - level', abbr: 'COC', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Certificate of Final Electrical Inspection (CFEI)', cat: 'Service - level', abbr: 'CFEI', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Certificate of Sale', cat: 'Service - level', abbr: 'CERTSALE', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Condominium Certificate of Title', cat: 'Service - level', abbr: 'CCT', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Connection Agreement', cat: 'Service - level', abbr: 'CA', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Contract for Electric Service', cat: 'Service - level', abbr: 'CONTRACT', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Contract of Lease', cat: 'Service - level', abbr: 'CLEASE', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Contract to Sell', cat: 'Service - level', abbr: 'CSELL', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Copy of Official receipts', cat: 'Transaction - level', abbr: 'OR', format: '[SIN]_[CXE_Nature_of_Transaction_SA_RF__c]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Copy of Signed ILP Conforme Letter', cat: 'Transaction - level', abbr: 'ILPANNEX', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'CRB Switch Approval', cat: 'Service - level', abbr: 'CRBSWITCH', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Customer\'s Service Application Warranty', cat: 'Service - level', abbr: 'CSAW', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Deed of Conditional Sale', cat: 'Service - level', abbr: 'DEEDCSALE', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Deed of Donation', cat: 'Service - level', abbr: 'DDONATE', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Deed of Sale', cat: 'Service - level', abbr: 'DEEDSALE', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Distribution Asset Study Fees / Receipts*', cat: 'Service - level', abbr: 'DASFEES', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Distribution Impact Study Fee / Receipt', cat: 'Service - level', abbr: 'DIS', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Distribution Wheeling Service Agreement (DWSA) for Embedded Generators', cat: 'Service - level', abbr: 'DWSAEMBED', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Distribution Wheeling Services Agreement (DWSA)', cat: 'Customer - level', abbr: 'DWSA', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'DTI Registration', cat: 'Customer - level', abbr: 'DTIREG', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Fixed Assest Boundary Document (FABD)', cat: 'Service - level', abbr: 'FABD', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'General Information Sheet', cat: 'Customer - level', abbr: 'GIS', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'HLURB Certification (HOA)', cat: 'Customer - level', abbr: 'HLURB', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Income Tax Return', cat: 'Customer - level', abbr: 'ITR', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Inter-Connection Agreement (ICA)', cat: 'Service - level', abbr: 'ICA', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Interruptible Load Program (ILP) Tripartite Agreement', cat: 'Service - level', abbr: 'ILP', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Lease Purchase Agreement', cat: 'Service - level', abbr: 'LEASEPA', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Mayor\'s Permit', cat: 'Customer - level', abbr: 'MAYOR', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'MERALCO\'s Confirmation of Initial Switch', cat: 'Customer - level', abbr: 'CERTINITIAL', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Metering Installation Registration Form (MIRF) and other attachments', cat: 'Service - level', abbr: 'MIRF', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Net-metering Agreement', cat: 'Service - level', abbr: 'NMA', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'NHA Certification', cat: 'Service - level', abbr: 'NHACERT', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Notarized Extra-Judicial Settlement', cat: 'Service - level', abbr: 'EXTRAJUD', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Notarized Undertaking for Leased Properties', cat: 'Service - level', abbr: 'NOTUNDERT', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Power Accounts Data Sheet', cat: 'Service - level', abbr: 'PADS', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Proof of Billing Address', cat: 'Transaction - level', abbr: 'PBA', format: '[SIN]_[CXE_Nature_of_Transaction_SA_RF__c]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Ramp-up Agreement', cat: 'Service - level', abbr: 'RAMPUP', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'RES License (Issued by ERC)', cat: 'Customer - level', abbr: 'RES', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Retail Counterparty Confirmation Form', cat: 'Customer - level', abbr: 'RETCOUNTER', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Right of Way Grant', cat: 'Service - level', abbr: 'ROW', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'SEC Registration', cat: 'Customer - level', abbr: 'SECREG', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Secretary Certificate', cat: 'Customer - level', abbr: 'SECCERT', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Signed and Sealed Electrical Plan (Single line + Load Schedule)', cat: 'Service - level', abbr: 'EPLAN', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Signed ILP Compensation Conforme Letter', cat: 'Customer - level', abbr: 'ILPCOMP', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Supplemental Agreement for Multi Metering per Floor', cat: 'Service - level', abbr: 'SAMMFLOOR', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Supplier of Last Resort (SoLR) contract', cat: 'Service - level', abbr: 'SOLR', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Switch Request Form', cat: 'Customer - level', abbr: 'SWTCHREQ', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Tax Declaration with receipt/s and Barangay Certificate', cat: 'Service - level', abbr: 'TAXDEC', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Terms & Conditions for Paperless Billing', cat: 'Transaction - level', abbr: 'TCPB', format: '[SIN]_[CXE_Nature_of_Transaction_SA_RF__c]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'TIN ID', cat: 'Customer - level', abbr: 'TINID', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Transfer Certificate of Title (TCT)', cat: 'Service - level', abbr: 'TCT', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'UPAO Certificate', cat: 'Service - level', abbr: 'UPAO', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Valid ID of the Representative', cat: 'Transaction - level', abbr: 'IDREP', format: '[SIN]_[CXE_Nature_of_Transaction_SA_RF__c]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'Valid IDs of Applicant', cat: 'Customer - level', abbr: 'IDAPP', format: '[Account_Name]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
            , {type: 'VAT Undertaking and or Zero-rated Certificate', cat: 'Service - level', abbr: 'VATCERT', format: '[SIN]_[abbr]_[CXE_Effectivity_Date_of_Document__c]'}
        ]).reduce(function(cur, nex){
            cur[nex.type] = nex;
            return cur;
        }, {});

        function select_file(selected){
            selected.querySelector('input').checked = true;
        }

        function b64toBlob(b64Data, contentType, sliceSize) {
          contentType = contentType || '';
          sliceSize = sliceSize || 512;

          var byteCharacters = atob(b64Data);
          var byteArrays = [];

          for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
            var slice = byteCharacters.slice(offset, offset + sliceSize);

            var byteNumbers = new Array(slice.length);
            for (var i = 0; i < slice.length; i++) {
              byteNumbers[i] = slice.charCodeAt(i);
            }

            var byteArray = new Uint8Array(byteNumbers);

            byteArrays.push(byteArray);
          }

          var blob = new Blob(byteArrays, {type: contentType});
          return blob;
        }

        function to_mmddyyyy(iso){
            var part = (iso||'').split('-'), yyyy = 0, mm = 1, dd = 2
            return (part[mm]||'') + (part[dd]||'') + (part[yyyy]||'');
        }

        function to_date_string(text){
            var date = new Date(text);
            return date.getFullYear() + "-" + ("0"+(date.getMonth() + 1)).slice(-2) + "-" + ("0"+date.getDate()).slice(-2);
        }

        function display_complete(id, name){
            return function(){
                debugger;
                document.getElementById("loader").innerHTML = "Complete";
                var a = document.getElementById('dms-link');
                a.href = '../../../' + id;
                a.textContent = name;    
            }
        }

        function handler(process, resolve, reject, is_describe){
            return {
                onSuccess: function(result){
                    console.log(process, result);

                    var _res = result.getArray && !is_describe ? result.getArray("records") : result;
                    
                    try{ 
                        if(_res.length == null || _res.length == 0)
                            resolve(_res);
                        else{
                            if(_res.filter(function(e){return !!e.errors}).length > 0)
                                reject(_res[0]);
                            else
                                resolve(_res);
                        }
                    }
                    catch(err){
                        console.error('JS', err);
                        reject(err);
                    }
                }
                , onFailure: function(err){
                    console.error(process, err);
                    reject(err);
                }
            }
        }

        function remote_action_handler(process, resolve, reject){
            return function(result, e){
// console.log(process, result, e);
                if(e.status && (result + '') != '') resolve(result);
                else reject(e);
            }
        }

        function exception(context){
            return function (err){
                console.error(err);

                if(typeof(err) == "string"){
                    document.getElementById("main").classList.remove("busy");
                    alert(err);
                }
                else{
                    delete context.buffer;
                    delete context.dom;
                    context.file = (context.file||{}).name;

                    document.getElementById("loader").innerHTML += "\n\nAn error occurred.\nPlease refresh the page.";
                    alert("An error occurred. Please contact admin.\n\n" + err);

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CXE_DMSUpload_ctrl.error_log}'
                        , JSON.stringify(context)
                        , remote_action_handler('error', resolve, reject)
                    );
                }
            }    
        }

        function too_large(file){
            return file.size > ({!$Label.DMS_FileUploadSize});
        }
            
        function not_allow_extension(file){
            return "{!$Label.CXE_DMS_File_Extension}"
                .split(",")
                .map(function(e){ return e.trim();})
                .indexOf((file.name||file.Name).toLowerCase().split(".").pop())
            == -1;
        }

        function validate_file(dom, files){
            var type = document.getElementById('CXE_Document_Type__c').querySelector("input,select");
            //alert(dom.CXE_Case__c.value);
            if(files.length != 1){
                return "Please select 1 file.";
            }
            else if(files.some(too_large)){
                return "{!$Label.CXE_DMS_Too_Large}";
            }
            else if(files.some(not_allow_extension)){
                return "{!$Label.CXE_DMS_Invalid_File_Extension}";
            }
            else if("{!type}" != 'service' && ['Service - level', 'Transaction - level'].indexOf(dom.CXE_Document_Category__c.value) > -1 && dom.CXE_Nature_of_Transaction_SA_RF__c.value == '' ){
            	return '{!$Label.CXE_DMS_NatureOfTransaction_Required}';
            }
            // else if("{!type}" != 'service' && ['Service - level', 'Transaction - level'].indexOf(dom.CXE_Document_Category__c.value) > -1 && dom.CXE_Service__c.value == BLANK ){
            //     return '{!$Label.CXE_DMS_Service_Required}';
            // }
             else if("{!type}" == 'account' && ['Service - level', 'Transaction - level'].indexOf(dom.CXE_Document_Category__c.value) > -1 && dom.CXE_Case__c.value == BLANK ){
                return '{!$Label.CXE_DMS_Case_Required}';
            }
            else if("{!type}" != 'service' && ['Service - level', 'Transaction - level', 'Customer - level'].indexOf(dom.CXE_Document_Category__c.value) > -1 && dom.CXE_Effectivity_Date_of_Document__c.value == ''){
                return '{!$Label.CXE_DMS_EffectivityDate_Required}';
            }
            else if(!type.value || !_manifest[type.value]){
                return 'Invalid "{!$ObjectType.DMS_Document__c.fields.CXE_Document_Type__c.Label}".';
            }
            
            return null;
        }

        function init_year(){
            setTimeout(function(){
                if(!!DatePicker.datePicker){
                    var picker = DatePicker.datePicker.yearPicker;
                    var first = picker.children[0];
                    var min = parseInt(first.value);

                    for(var i = -1; i >= -100; i--){
                        var option = document.createElement("option");
                        option.text = min + i;
                        option.value = min + i;

                        picker.insertBefore(option, first);
                        first = option;
                    }
                }
                else{
                    init_year();
                }
            }, 500);
        }

        sforce.connection.sessionId = '{!$Api.Session_ID}';
        var sf = {
            init: function(type, args){
                var sobj = new sforce.SObject(type);
                Object.keys(args).forEach(function(k){
                    if(args[k] != null && args[k] != "")
                        sobj[k] = args[k];
                });

                return sobj;
            }
            , create: function(sobj){
                return new Promise(function(resolve, reject){
                    sforce.connection.create(
                        sobj.length != null ? sobj : [sobj]
                        , handler("create", resolve, reject)
                    );
                });
            }
            , query: function(soql){
                console.log(soql);
                return new Promise(function(resolve, reject){
                    sforce.connection.query(
                        soql
                        , handler("query", resolve, reject)
                    );
                });
            }
            , remove: function(id){
                return new Promise(function(resolve, reject){
                    sforce.connection.deleteIds(
                        [id]
                        , handler("remove", resolve, reject)
                    );
                });
            }
        }

        function read_input_file(context){
            return new Promise(function(resolve, reject){
                var reader = new FileReader();
                reader.onload = function() {
                    context.buffer = reader.result;
                    resolve(context);
                };
                reader.onerror = reject;

                reader.readAsArrayBuffer(context.file);
            });
        }

        function read_attachment_file(context){

            function base64ToArrayBuffer(base64) {
                var binary_string =  window.atob(base64);
                var len = binary_string.length;
                var bytes = new Uint8Array( len );
                for (var i = 0; i < len; i++)        {
                    bytes[i] = binary_string.charCodeAt(i);
                }
                return bytes.buffer;
            }

            if(context.file.type == 'attachment'){
                return sf.query("SELECT Id, Body FROM Attachment WHERE Id = '"+context.file.id+"'")
                    .then(function(result){
                        context.buffer = base64ToArrayBuffer(result[0].Body);
                        return Promise.resolve(context);
                    })    
            }
            else if(context.file.type == 'content'){
                return sf.query("SELECT Id, VersionData FROM ContentVersion WHERE ContentDocumentId = '"+context.file.id+"' order by CreatedDate desc limit 1 ")
                    .then(function(result){
                        context.buffer = base64ToArrayBuffer(result[0].VersionData);
                        return Promise.resolve(context);
                    })
            }
            
        }

        function init_sobj(dom, file_extension){

            var result = {
                CXE_Document_Category__c: dom.CXE_Document_Category__c.value
                , CXE_Document_Type__c: document.getElementById('CXE_Document_Type__c').querySelector("input,select").value
                , CXE_Nature_of_Transaction_SA_RF__c: dom.CXE_Nature_of_Transaction_SA_RF__c.value
            }

            result.CXE_Case__c = dom.CXE_Case__c.value;
            !!"{!account_id}" && (result.CXE_Account__c = "{!account_id}");
            !!"{!case_id}" && (result.CXE_Case__c = "{!case_id}");
            !!"{!service_id}" && (result.CXE_Service__c = "{!service_id}");
            console.log('>>>>> ', result.CXE_Service__c);
            var start = dom.CXE_Effectivity_Date_of_Document__c.value
                , end = dom.CXE_Expiration_Date_of_Document__c.value
            ;

            !!start && (result.CXE_Effectivity_Date_of_Document__c = to_date_string(start));
            !!end && (result.CXE_Expiration_Date_of_Document__c = to_date_string(end));

            //result.CXE_Service__c = dom.CXE_Service__c.value;
            
            result.CXE_File_Name__c = _manifest[result.CXE_Document_Type__c].format
                .replace("[CXE_Effectivity_Date_of_Document__c]", !start || start.length < 2? '' : to_mmddyyyy(result.CXE_Effectivity_Date_of_Document__c))
                .replace("[CXE_Expiration_Date_of_Document__c]", !end || end.length < 2? '' : to_mmddyyyy(result.CXE_Expiration_Date_of_Document__c))
                .replace("[CXE_Document_Category__c]", result,CXE_Document_Category__c)
                .replace("[CXE_Nature_of_Transaction_SA_RF__c]", result.CXE_Nature_of_Transaction_SA_RF__c)
                .replace("[abbr]", _manifest[result.CXE_Document_Type__c].abbr)
                .replace("[Account_Name]", "{!account_name}")
                // .replace("[SIN]", "{!IF(ISNULL(sin), '#MISSING-SIN', sin)}")
                +'.'+ file_extension;

            return result;
        }

        function remove_attachment(context){
            return sf.remove(context.file.id)
                .then(function(result){
                    return Promise.resolve(context);
                })
        }

        function init_dms(context){
            context.sobj = init_sobj(context.dom, (context.file.name || context.file.Name).split('.').pop());
            console.log('>>>>> ', context.sobj);
            console.log('>>>>> ', "{!case_id}");
            return Promise.all([
                // sf.query("SELECT Id, Service__r.Case__c FROM Address__c WHERE Service__c = '"+(context.sobj.CXE_Service__c||BLANK)+"' and Type__c = 'Service' and Account__c = '{!account_id}'")
                sf.query("SELECT Id, Service__r.Case__c FROM Address__c WHERE Service__c = '"+(context.sobj.CXE_Service__c||BLANK)+"' and Type__c = 'Service' ")
                , sf.query("SELECT SIN__c FROM Agreement__c WHERE Id = '"+(context.sobj.CXE_Service__c||BLANK)+"'")
            ])
            .then(function(results){ 
                var address = results[0][0];
                var agreement = results[1][0];
                
                if(!!address){
                    context.sobj.CXE_Service_Address__c = address.Id;

                    if((context.sobj.CXE_Case__c == null || context.sobj.CXE_Case__c == BLANK || context.sobj.CXE_Case__c.length < 5) 
                        && !!address.Service__r && !!address.Service__r.Case__c)
                        context.sobj.CXE_Case__c = address.Service__r.Case__c;
                }

                //context.sobj.CXE_File_Name__c = context.sobj.CXE_File_Name__c.replace("[SIN]", (agreement||{}).SIN__c || "-MISSING-SIN-")
            
                console.log('testing 1', context.sobj.CXE_Case__c);
                return new Promise(function(resolve, reject){
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CXE_DMSUpload_ctrl.check_service}'
                        , context.sobj.CXE_Case__c
                        , remote_action_handler('find', resolve, reject)
                    );
                });
            })
            .then(function(result){
                console.log('testing 2');
                //START CSM-15029 RReyes JAN-04-17
                var caseNum = 'MISSING-CASE';
                console.log('>>result: ' + JSON.stringify(result));
                if(result.Id != null && result.Id != '') {
                    context.sobj.CXE_Service__c = result.Id;
                    
                    if(result.Case__c != null){
                        caseNum = result.Case__r.CaseNumber;
                    }
                }
                //START CSM-15165 Rhyan Cruz JAN-17-18
                if('{!type}' == 'account' && context.sobj.CXE_Case__c != null && context.sobj.CXE_Case__c != ''){   
                    return sf.query("SELECT CaseNumber FROM Case WHERE id = '"+context.sobj.CXE_Case__c+"'")
                    .then(function(result){
                        //context.buffer = base64ToArrayBuffer(result[0].CaseNumber);
                        var newfilename = '';
                        caseNum = result[0].CaseNumber;
                        newfilename = context.sobj.CXE_File_Name__c;
                        newfilename = newfilename.replace("[SIN]", caseNum);
                        context.sobj.CXE_File_Name__c = newfilename;
                        
                        return Promise.resolve(context);
                    })
                }
                //END CSM-15165 Rhyan Cruz JAN-17-18
                //context.sobj.CXE_File_Name__c = context.sobj.CXE_File_Name__c.replace("[SIN]", caseNum);
                console.log('>> sobj: ' + context.sobj);
                //END CSM-15029 RReyes JAN-04-17
                return new Promise(function(resolve, reject){
                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CXE_DMSUpload_ctrl.find_dms}'
                        , context.sobj.CXE_File_Name__c
                        , remote_action_handler('find', resolve, reject)
                    );
                });
            })
            .then(function(result){
                console.log('found', result);
                if(result > 0) throw 'Duplicate file "'+context.sobj.CXE_File_Name__c+'"';
                
                else return Promise.resolve(context);
            })
        }

        function create_dms(context){
            
            document.getElementById("loader").innerHTML = "Inserting...";
            context.stage = 'create_dms: ';

            return sf.create(sf.init("DMS_Document__c", context.sobj))
            .then(function(result){
                context.dms_id = result[0].id;
                return Promise.resolve(context);
            });
        }

        function rename_file(context){
            return new Promise(function(resolve, reject){
                document.getElementById("loader").innerHTML = "Finalizing...";
                context.stage = 'rename_file: ' + [context.aid, context.dms_id.substr(0, 15), context.time].join('|');
console.log('rename', context.aid, context.dms_id, context.time);
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.CXE_DMSUpload_ctrl.rename_file}'
                    , context.aid
                    , context.dms_id.substr(0, 15)
                    , context.time
                    , remote_action_handler('rename', resolve, reject)
                );
            })
            .then(function(){
                return Promise.resolve(context)
            });
        }

        function upload_file(context){
            return (new Promise(function(resolve, reject){
                    document.getElementById("loader").innerHTML = "Signing...";
                    context.stage = 'upload_file: signing';

                    Visualforce.remoting.Manager.invokeAction(
                        '{!$RemoteAction.CXE_DMSUpload_ctrl.upload_sign}'
                        , context.aid
                        , context.uid + '-' + context.time
                        , remote_action_handler('sign', resolve, reject)
                        , {escape: false}
                    );
                }))
                .then(function(url){

                    var xhr = new XMLHttpRequest();
                    context.stage = 'upload_file: ' + url;
                    document.getElementById("loader").innerHTML = "Uploading...";

                    return new Promise(function(resolve, reject){
                        xhr.onreadystatechange = function(e){
                            if(xhr.readyState == 4){
                                context.stage = 'upload_file: status('+xhr.status+')';

                                if(xhr.status == 200 && xhr.responseURL.indexOf('.amazonaws.com/DMS') > -1 && xhr.response == "" && xhr.responseText == "" && xhr.responseType == "") resolve(context);
                                else reject(xhr);
                            }
                        }
                        xhr.open("PUT", url);
                        xhr.setRequestHeader("Content-Type", "application/octet-stream");
                        xhr.send(context.buffer);
                    });
                });
        }

        function complete_process(context){
            console.log('complete', context);
            document.getElementById("loader").innerHTML = "Complete";
            var a = document.getElementById('dms-link');
            a.textContent = 'Result';
            a.href = '../../' + context.dms_id;
        }
    </script>

    <script>
        (function(){
            var cache = {}, context = {aid: '{!account_id}'.substr(0, 15), uid: '{!$User.Id}'.substr(0, 15)};
            
            context.dom = {
                file: document.getElementById("file")
                , upload: document.getElementById("file-trigger")
                // , CXE_Service__c: Array.from(document.getElementById("CXE_Service__c").querySelectorAll("input[type=hidden]")).filter(function(e){return e.id.indexOf("_lkid") > -1})[0]
                , CXE_Case__c: Array.from(document.getElementById("CXE_Case__c").querySelectorAll("input[type=hidden]")).filter(function(e){return e.id.indexOf("_lkid") > -1})[0]
                , attachment: document.getElementById("attachment-trigger")
            }

            'CXE_Document_Category__c,CXE_Document_Type__c,CXE_Nature_of_Transaction_SA_RF__c,CXE_Effectivity_Date_of_Document__c,CXE_Effectivity_Date_of_Document__c,CXE_Expiration_Date_of_Document__c'.split(',').forEach(function(key){
                context.dom[key] = document.getElementById(key).querySelector("input,select");
            }, {});

            context.dom.upload.addEventListener('click', function(e){
                var files = Array.from(context.dom.file.files||[]);
                var validate_msg = validate_file(context.dom, files);

                if(!!validate_msg){
                    alert(validate_msg);
                }
                else{
                    document.getElementById("main").classList.add("busy");
                    document.getElementById("loader").innerHTML = "Checking...";

                    context.file = files[0];
                    context.time = (new Date()).toISOString();
                    
                    init_dms(context)
                    .then(read_input_file)
                    .then(upload_file)
                    .then(create_dms)
                    .then(rename_file)
                    .then(complete_process)
                    .catch(exception(context))
                }
            });

            context.dom.attachment.addEventListener('click', function(e){
                var selected = document.getElementById("file-list").querySelector("input.selected-file:checked");
                var files = [];

                if(!!selected) files.push({id: selected.value, type: selected.getAttribute('data-type'), name: '-.'+selected.getAttribute('data-extension').toLowerCase()});

                var validate_msg = validate_file(context.dom, files);

                if(!!validate_msg){
                    alert(validate_msg);
                }
                else{
                    document.getElementById("main").classList.add("busy");
                    document.getElementById("loader").innerHTML = "Building DMS...";

                    context.file = files[0];
                    context.time = (new Date()).toISOString();

                    init_dms(context)
                    .then(read_attachment_file)
                    .then(upload_file)
                    .then(create_dms)
                    .then(rename_file)
                    .then(remove_attachment)
                    .then(complete_process)
                    .catch(exception(context));
                }
            });

            context.dom.CXE_Document_Category__c.addEventListener('change', function(e){
                //document.getElementById("CXE_Service__c").classList.remove('required');
                document.getElementById("CXE_Effectivity_Date_of_Document__c").classList.remove('required');
                document.getElementById("CXE_Nature_of_Transaction_SA_RF__c").classList.remove('required');
                //if(['Service - level', 'Transaction - level'].indexOf(context.dom.CXE_Document_Category__c.value) > -1)
                    //document.getElementById("CXE_Service__c").classList.add('required');
                if(['Service - level', 'Transaction - level', 'Customer - level'].indexOf(context.dom.CXE_Document_Category__c.value) > -1)
                    document.getElementById("CXE_Effectivity_Date_of_Document__c").classList.add('required');
                if(['Service - level', 'Transaction - level'].indexOf(context.dom.CXE_Document_Category__c.value) > -1)
                    document.getElementById("CXE_Nature_of_Transaction_SA_RF__c").classList.add('required');
                
            });

            if('{!type}' == 'case'){
                Promise.all([
                    sf.query("SELECT Id, Name, ContentType, BodyLength FROM Attachment WHERE ParentId = '{!case_id}'")
                    , sf.query("SELECT Id, ContentDocument.Id, ContentDocument.Title, ContentDocument.FileType, ContentDocument.ContentSize FROM ContentDocumentLink WHERE LinkedEntityId = '{!case_id}' ")
                ])
                .then(function(results){
                    // Start R2C CSM-15165 Von Pernicia 1/17/18
                    //cache = results[0].map(function(a){return {id: a.Id, name: a.Name, type: a.getFloat('ContentType'), len: a.BodyLength, _: 'attachment'};})
                    cache = results[0].map(function(a){return {id: a.Id, name: a.Name, type: a.Name.split('.').pop(), len: a.BodyLength, _: 'attachment'};})
                    // End R2C CSM-15165 Von Pernicia 1/17/18
                    .concat(
                        results[1].map(function(a){return {id: a.ContentDocument.Id, name: a.ContentDocument.Title, type: a.ContentDocument.FileType, len: a.ContentDocument.getFloat('ContentSize'), _: 'content'};})
                    );

                    var KB = 1024, MB = KB * KB;
                    if(cache == null || cache.length == 0){
                        document.getElementById('upload-attachment').disabled = true;
                        document.getElementById('upload-new-file').checked = true;
                    }
                    else{
                        document.getElementById('file-repo-fileupload-div').classList.add('file-repo');
                        document.getElementById('file-trigger').classList.add('file-repo');
                        document.getElementById('attachment-trigger').classList.remove("file-repo");                        

                        var template = document.getElementById('attachment-list-template').innerHTML;
                        document.getElementById('file-list').innerHTML = cache.map(function(sobj){
                            var div = document.createElement("DIV");
                            var result = template.replace(/{{ID}}/ig, sobj.id).replace('{{TYPE}}', sobj._);

                            div.innerText = sobj.name;
                            result = result.replace('{{NAME}}', div.innerHTML);

                            div.innerText = sobj.type;
                            result = result.replace('{{EXTENSION}}', div.innerHTML).replace('{{EXTENSION}}', div.innerHTML);

                            if(sobj.len > MB){
                                result = result.replace('{{SIZE_AMOUNT}}', (sobj.len / MB).toFixed(1));
                                result = result.replace('{{SIZE_UNIT}}', 'MB');
                            }
                            else if(sobj.len > KB){
                                result = result.replace('{{SIZE_AMOUNT}}', (sobj.len / KB).toFixed(0));
                                result = result.replace('{{SIZE_UNIT}}', 'KB');
                            }
                            else{
                                result = result.replace('{{SIZE_AMOUNT}}', (sobj.len).toFixed(0));
                                result = result.replace('{{SIZE_UNIT}}', 'B');
                            }

                            return result;
                        })
                        .join('');
                    }
                })
                .catch(console.error)
            }

            sfdcPage.appendToOnloadQueue(init_year);
        })();
    </script>
</apex:component>